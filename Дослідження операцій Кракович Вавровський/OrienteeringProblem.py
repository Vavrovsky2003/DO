import math
import numpy as np
import matplotlib.pyplot as plt
import warnings
import time

warnings.filterwarnings("ignore", category=RuntimeWarning) 
matrix_distances=[[0,0.3,2.7,3,2.9,2.8,1.8,2.2,2.3,2.4,0.7,4.1,5.8,6.1,2.6,2.7,1.7,1.3,2.2,2.6,2.6,1.8,1.4,3.3,3],
[0.3,0,2.4,2.6,2.5,2.5,1.4,1.8,2,2.7,1,4.4,6.1,5.7,3,2.4,1.4,1,1.9,2.3,3,1.5,1.8,2.9,2.7],
[1.3,1.6,0,0.4,1,0.1,1.2,3.6,4.1,3.6,1.9,5.4,9.1,9.7,3.3,3,3,1.6,3.6,0.1,3.9,2.1,2.7,0.5,0.8],
[1.5,1.9,0.4,0,0.8,0.5,1.5,3.7,3.8,3.8,2.1,5.6,9.3,7.6,3.5,3.3,3.2,1.8,3.8,0.3,4.1,2.3,2.9,1,1],
[1.4,1.1,1.9,1,0,2,0.6,2.9,3.1,3.8,2.1,5.5,9.2,6.8,3.2,2.4,2.5,1,3,1.7,4,1.4,2.8,2.4,2.2],
[1.4,1.7,0.1,0.5,1.1,0,1.3,3.6,3.7,3.7,2,5.4,9.2,7.5,3.4,3.1,3.1,1.7,3.7,0.1,4,2.2,2.8,0.4,0.9],
[0.9,0.7,1.3,1.5,1.8,1.4,0,2.5,2.7,3.3,1.6,5.1,6.7,6.4,3.3,1.9,2,0.5,2.6,1.1,3.6,1,2.4,1.8,1.6],
[2.2,1.9,3.2,3.4,3.7,3.3,2.2,0,1,1.6,2.9,6.3,10,6.8,5.3,2.7,2.4,1.8,0.2,3.1,4.8,1.7,3.6,3.8,3.5],
[2.4,2.1,3.4,3.7,4,3.5,2.5,1.5,0,0.8,3.1,6.5,10.2,7,5.5,2.9,2.6,2,1.6,3.3,6.2,2,3.9,4,3.8],
[2.4,2.8,3.7,3.9,3.9,3.8,4.2,4.6,5,0,2.4,2.3,4,5.7,4.4,5.2,4.1,3.8,4.7,3.6,1,4.2,3.2,4.2,4],
[0.7,1,1.9,2.1,2.1,2,2.4,2.8,3,2.4,0,4.2,7.2,7.8,1.7,3.4,2.4,2,2.9,1.8,2.7,2.5,0.8,2.5,2.2],
[5.1,4.8,6.6,6.8,6.7,6.7,5.6,4.7,4.2,2.3,5.8,0,2.4,4.1,8.7,6,4,5.2,4.8,6.4,1.7,5.1,9.1,7.1,6.9],
[5.5,5.1,7.2,7.4,7.7,7.3,6.2,5.1,4.6,6.5,6.2,1.8,0,4,9.8,6.4,4.3,5.8,5.2,6.8,2.7,5.4,10.2,7.7,7.5],
[6.1,5.7,7.5,7.7,8,7.6,6.5,5.6,5.1,7.4,6.7,4.9,4.8,0,10.8,6.9,4.9,6.1,5.7,7.3,5.3,6,7.5,8,7.8],
[2.2,2.5,3.4,3.6,3.6,3.5,3.9,4.3,4.5,4,1.5,5.7,8.1,8.8,0,4.9,3.9,3.5,4.4,3.3,5.4,4,1.8,4,3.7],
[2,1.6,2.3,2.5,2.8,2.4,1,2.2,2.4,4.3,2.6,6.1,9.8,6.1,4.6,0,1.8,0.7,2.3,2.1,5.8,0.3,3.4,2.8,2.6],
[1.5,1.2,3,3.2,4.2,3.1,2,1.5,1.4,3.9,2.2,4.4,5.3,5.1,4.2,3.2,0,1.6,1.6,2.8,5.4,2.2,3,3.5,3.3],
[1.4,1.1,1.7,1.9,2.2,1.8,0.4,2.3,3.1,3.7,2,5.5,9.2,6.2,3.8,1.4,1.8,0,3,1.6,5.2,0.8,2.8,2.2,2],
[2.2,1.9,3.2,3.5,3.8,3.3,2.3,0.1,3.1,4.6,2.9,6.3,10,6.8,4.9,2.7,2.4,1.8,0,3.1,6,1.8,3.7,3.8,3.6],
[1.2,1.5,0.1,0.3,0.9,0.2,1.1,3.3,3.5,3.5,1.8,5.2,8.9,7.2,3.1,2.9,2.9,1.5,3.4,0,4.9,2,2.6,0.7,0.2],
[4.9,4.6,6.3,6.5,6.8,6.4,5.4,4.5,4,2.2,5.6,1.8,3.5,4.8,8.6,5.8,3.7,4.9,4.6,6.2,0,4.8,6.3,6.9,6.6],
[1.6,1.3,1.9,2.2,2.5,2,0.7,2.5,2.7,4,2.3,5.7,9.4,6.4,4,1.5,2,0.3,2.6,1.8,5.4,0,3.1,2.5,2.3],
[7.5,7.9,8.8,9,9,8.9,9.3,10.4,9.9,6.3,1.5,7.3,6.4,7,9.6,10.3,9.6,8.9,10.5,8.6,6.2,9.3,0,9.3,9.1],
[1.9,2.2,0.5,1,1.6,0.4,1.8,4,4.2,4.2,2.5,5.9,7.6,7.9,3.8,3.6,3.5,2.2,4.1,0.7,5.6,2.6,3.2,0,1.3],
[1.6,2,0.8,1,1.4,0.9,1.6,3.8,3.9,3.9,2.2,5.7,7.3,7.7,3.6,3.3,3.3,1.9,3.9,0.6,5.4,2.4,3,1.3,0]]

matrix_times=[[0,1,9,10,11,9,5,7,8,5,2,8,12,15,8,6,5,4,8,8,7,5,4,12,11],
[1,0,8,9,10,9,5,7,7,6,3,9,13,14,9,6,5,3,7,7,8,4,4,11,10],
[5,5,0,2,5,1,6,12,13,10,7,13,16,19,10,9,10,7,12,1,11,8,8,3,4],
[6,7,2,0,6,3,7,13,14,11,8,14,17,21,12,10,11,8,14,2,13,9,10,5,5],
[6,5,9,9,0,9,4,11,12,11,8,14,17,19,11,7,9,4,12,8,12,5,9,12,10],
[5,6,1,3,5,0,7,13,13,10,7,13,16,20,11,10,11,7,13,1,12,8,9,2,4],
[3,3,5,5,7,5,0,9,10,8,6,12,16,16,11,5,7,2,10,4,10,3,7,8,7],
[10,9,13,13,15,13,9,0,13,15,12,18,21,20,19,9,10,8,0,12,17,7,13,16,15],
[11,10,14,15,17,14,10,6,0,16,13,19,22,21,20,10,12,9,6,13,19,8,15,17,16],
[6,6,10,10,10,10,11,13,15,0,5,7,11,16,11,12,11,10,13,9,4,11,7,13,11],
[2,2,6,6,6,6,7,9,9,5,0,8,9,12,6,8,7,5,9,5,7,7,2,8,7],
[14,13,20,21,22,22,17,14,12,7,16,0,1,13,15,17,12,15,15,19,7,16,14,25,23],
[15,14,23,24,25,23,19,15,13,15,17,5,0,14,17,18,12,18,15,20,7,17,16,26,25],
[15,14,22,23,24,23,17,15,13,15,17,13,11,0,18,18,12,16,15,21,14,17,18,25,24],
[6,7,10,11,11,10,11,13,14,10,4,13,12,15,0,12,11,10,14,9,12,11,4,13,12],
[6,5,9,9,11,9,4,8,9,11,8,14,17,15,13,0,6,3,8,8,13,1,9,12,11],
[6,5,12,13,15,12,8,7,6,11,8,13,14,13,13,8,0,7,7,11,13,7,9,15,14],
[5,4,6,7,8,7,1,9,11,10,7,13,16,16,12,4,7,0,11,5,13,3,9,9,8],
[10,9,13,14,15,14,9,1,13,15,12,18,21,20,18,9,11,8,0,12,18,7,14,16,15],
[4,5,1,1,4,1,5,11,12,9,6,12,15,19,10,8,9,6,12,0,11,7,8,4,3],
[13,12,21,21,23,21,16,13,11,8,15,6,10,13,16,16,10,16,13,20,0,15,17,24,22],
[6,5,7,8,10,8,3,9,10,10,8,14,17,17,14,4,7,2,10,7,13,0,9,10,9],
[10,11,14,15,15,14,15,17,15,8,10,10,7,10,12,16,14,14,17,13,9,15,0,17,16],
[8,9,3,6,8,3,9,15,16,13,10,16,20,23,14,12,13,10,16,4,15,11,12,0,7],
[7,7,4,5,6,4,8,14,14,11,9,15,19,21,12,11,12,8,14,3,14,10,10,7,0]]

'''
matrix_duration_times=[[0,1,11,11,11,11,6,14,13,5,4,9,13,16,8,7,9,5,11,10,8,6,5,12,11],
[1,0,10,11,10,10,6,13,13,6,5,10,13,15,9,8,6,3,8,8,9,4,5,12,11],
[7,8,0,2,4,1,6,15,16,12,8,14,16,20,10,10,11,8,15,3,12,10,9,5,4],
[8,9,2,0,5,3,7,16,16,13,10,15,18,25,14,10,12,8,15,2,15,10,10,5,6],
[5,5,9,9,0,9,3,18,15,10,10,15,18,20,12,7,10,4,15,10,13,5,10,13,10],
[7,8,1,3,5,0,7,15,16,12,10,15,18,25,14,12,15,8,15,1,13,10,10,3,4],
[4,3,6,7,7,6,0,15,14,9,10,15,20,20,12,5,8,2,10,5,10,34,8,10,8],
[11,10,15,16,16,16,11,0,17,16,15,20,23,22,20,10,10,10,0,15,18,8,15,17,15],
[12,11,16,17,17,17,12,7,0,17,14,20,23,22,23,11,12,10,6,15,20,8,16,17,17],
[6,7,11,11,11,11,13,21,19,0,6,7,12,16,12,15,12,10,15,10,4,14,10,15,12],
[2,2,7,8,7,8,8,10,11,5,0,10,10,15,10,10,10,5,9,6,8,9,3,9,7],
[15,14,25,22,23,23,20,15,15,8,18,0,10,20,20,20,14,16,17,20,7,18,16,30,25],
[20,16,25,25,25,25,20,15,14,16,19,6,0,17,20,20,12,20,15,20,7,20,20,30,28],
[17,15,25,25,25,25,18,15,14,17,18,19,14,0,20,20,14,16,17,24,15,16,18,30,25],
[10,10,12,13,14,12,12,15,15,10,4,15,15,20,0,15,15,10,14,10,13,11,5,15,13],
[8,7,10,10,12,10,5,10,10,14,10,14,17,17,15,0,8,3,10,9,15,1,9,13,12],
[8,7,15,15,15,15,9,8,7,12,8,15,15,14,14,10,0,10,10,14,13,8,10,17,15],
[7,8,7,8,10,10,1,10,12,12,7,15,20,18,14,5,7,0,12,5,15,3,12,12,10],
[11,10,15,15,17,15,10,1,17,18,14,20,25,25,20,10,15,10,0,15,20,10,16,18,17],
[5,6,1,1,5,1,5,13,14,10,8,15,17,20,12,10,10,8,14,0,15,8,9,5,4],
[15,15,23,24,27,23,17,14,11,10,16,6,12,15,16,17,13,16,15,22,0,16,18,25,23],
[8,7,8,10,12,9,3,10,12,11,10,15,20,19,15,4,8,2,11,8,15,0,10,11,9],
[12,12,15,16,15,15,17,18,16,9,12,11,7,11,13,20,16,15,18,15,10,17,0,18,17],
[10,10,3,7,8,4,10,17,15,14,13,18,25,24,17,14,15,13,20,4,19,11,13,0,7],
[9,8,5,6,7,4,9,18,19,12,10,20,22,23,14,12,13,10,16,3,16,13,12,7,0]]
'''


matrix_on_foot_times=[[0/5,0.3/5,2.7/5,3/5,2.9/5,2.8/5,1.8/5,2.2/5,2.3/5,2.4/5,0.7/5,4.1/5,5.8/50,6.1/5,2.6/5,2.7/5,1.7/5,1.3/5,2.2/5,2.6/5,2.6/5,1.8/5,1.4/5,3.3/5,3/5],
[0.3/5,0/5,2.4/5,2.6/5,2.5/5,2.5/5,1.4/5,1.8/5,2,2.7/5,1/5,4.4/5,6.1/5,5.7/5,3/5,2.4/5,1.4/5,1/5,1.9/5,2.3/5,3/5,1.5/5,1.8/5,2.9/5,2.7/5],
[1.3/5,1.6/5,0/5,0.4/5,1/5,0.1/5,1.2/5,3.6/5,4.1/5,3.6/5,1.9/5,5.4/5,9.1/5,9.7/5,3.3/5,3/5,3/5,1.6/5,3.6/5,0.1/5,3.9/5,2.1/5,2.7/5,0.5/5,0.8/5],
[1.5/5,1.9/5,0.4/5,0/5,0.8/5,0.5/5,1.5/5,3.7/5,3.8/5,3.8/5,2.1/5,5.6/5,9.3/5,7.6/5,3.5/5,3.3/5,3.2/5,1.8/5,3.8/5,0.3/5,4.1/5,2.3/5,2.9/5,1/5,1/5],
[1.4/5,1.1/5,1.9/5,1/5,0/5,2/5,0.6/5,2.9/5,3.1/5,3.8/5,2.1/5,5.5/5,9.2/5,6.8/5,3.2/5,2.4/5,2.5/5,1/5,3/5,1.7/5,4/5,1.4/5,2.8/5,2.4/5,2.2/5],
[1.4/5,1.7/5,0.1/5,0.5/5,1.1/5,0/5,1.3/5,3.6/5,3.7/5,3.7/5,2/5,5.4/5,9.2/5,7.5/5,3.4/5,3.1/5,3.1/5,1.7/5,3.7/5,0.1/5,4/5,2.2/5,2.8/5,0.4/5,0.9/5],
[0.9/5,0.7/5,1.3/5,1.5/5,1.8/5,1.4/5,0/5,2.5/5,2.7/5,3.3/5,1.6/5,5.1/5,6.7/5,6.4/5,3.3/5,1.9/5,2/5,0.5/5,2.6/5,1.1/5,3.6/5,1,2/5.4/5,1.8/5,1.6/5],
[2.2/5,1.9/5,3.2/5,3.4/5,3.7/5,3.3/5,2.2/5,0/5,1/5,1.6/5,2.9/5,6.3/5,10/5,6.8/5,5.3/5,2.7/5,2.4/5,1.8/5,0.2/5,3.1/5,4.8/5,1.7/5,3.6/5,3.8/5,3.5/5],
[2.4/5,2.1/5,3.4/5,3.7/5,4/5,3.5/5,2.5/5,1.5/5,0/5,0.8/5,3.1/5,6.5/5,10.2/5,7/5,5.5/5,2.9/5,2.6/5,2/5,1.6/5,3.3/5,6.2/5,2/5,3.9/5,4/5,3.8/5],
[2.4/5,2.8/5,3.7/5,3.9/5,3.9/5,3.8/5,4.2/5,4.6/5,5/5,0/5,2.4/5,2.3/5,4/5,5.7/5,4.4/5,5.2/5,4.1/5,3.8/5,4.7/5,3.6/5,1/5,4.2/5,3.2/5,4.2/5,4/5],
[0.7/5,1/5,1.9/5,2.1/5,2.1/5,2/5,2.4/5,2.8/5,3/5,2.4/5,0/5,4.2/5,7.2/5,7.8/5,1.7/5,3.4/5,2.4/5,2/5,2.9/5,1.8/5,2.7/5,2.5/5,0.8/5,2.5/5,2.2/5],
[5.1/5,4.8/5,6.6/5,6.8/5,6.7/5,6.7/5,5.6/5,4.7/5,4.2/5,2.3/5,5.8/5,0,2.4/5,4.1/5,8.7/5,6/5,4/5,5.2/5,4.8/5,6.4/5,1.7/5,5.1/5,9.1/5,7.1/5,6.9/5],
[5.5/5,5.1/5,7.2/5,7.4/5,7.7/5,7.3/5,6.2/5,5.1/5,4.6/5,6.5/5,6.2/5,1.8/5,0/5,4/5,9.8/5,6.4/5,4.3/5,5.8/5,5.2/5,6.8/5,2.7/5,5.4/5,10.2/5,7.7/5,7.5/5],
[6.1/5,5.7/5,7.5/5,7.7/5,8/5,7.6/5,6.5/5,5.6/5,5.1/5,7.4/5,6.7/5,4.9/5,4.8/5,0/5,10.8/5,6.9/5,4.9/5,6.1/5,5.7/5,7.3/5,5.3/5,6/5,7.5/5,8/5,7.8/5],
[2.2/5,2.5/5,3.4/5,3.6/5,3.6/5,3.5/5,3.9/5,4.3/5,4.5/5,4/5,1.5/5,5.7/5,8.1/5,8.8/5,0/5,4.9/5,3.9/5,3.5/5,4.4/5,3.3/5,5.4/5,4/5,1.8/5,4/5,3.7/5],
[2/5,1.6/5,2.3/5,2.5/5,2.8/5,2.4/5,1/5,2.2/5,2.4/5,4.3/5,2.6/5,6.1/5,9.8/5,6.1/5,4.6/5,0/5,1.8/5,0.7/5,2.3/5,2.1/5,5.8/5,0.3/5,3.4/5,2.8/5,2.6/5],
[1.5/5,1.2/5,3/5,3.2/5,4.2/5,3.1/5,2/5,1.5/5,1.4/5,3.9/5,2.2/5,4.4/5,5.3/5,5.1/5,4.2/5,3.2/5,0/5,1.6/5,1.6/5,2.8/5,5.4/5,2.2/5,3/5,3.5/5,3.3/5],
[1.4/5,1.1/5,1.7/5,1.9/5,2.2/5,1.8/5,0.4/5,2.3/5,3.1/5,3.7/5,2/5,5.5/5,9.2/5,6.2/5,3.8/5,1.4/5,1.8/5,0/5,3/5,1.6/5,5.2/5,0.8/5,2.8/5,2.2/5,2/5],
[2.2/5,1.9/5,3.2/5,3.5/5,3.8/5,3.3/5,2.3/5,0.1/5,3.1/5,4.6/5,2.9/5,6.3/5,10/5,6.8/5,4.9/5,2.7/5,2.4/5,1.8/5,0/5,3.1/5,6/5,1.8/5,3.7/5,3.8/5,3.6/5],
[1.2/5,1.5/5,0.1/5,0.3/5,0.9/5,0.2/5,1.1/5,3.3/5,3.5/5,3.5/5,1.8/5,5.2/5,8.9/5,7.2/5,3.1/5,2.9/5,2.9/5,1.5/5,3.4/5,0/5,4.9/5,2/5,2.6/5,0.7/5,0.2/5],
[4.9/5,4.6/5,6.3/5,6.5/5,6.8/5,6.4/5,5.4/5,4.5/5,4/5,2.2/5,5.6/5,1.8/5,3.5/5,4.8/5,8.6/5,5.8/5,3.7/5,4.9/5,4.6/5,6.2/5,0/5,4.8/5,6.3/5,6.9/5,6.6/5],
[1.6/5,1.3/5,1.9/5,2.2/5,2.5/5,2/5,0.7/5,2.5/5,2.7/5,4/5,2.3/5,5.7/5,9.4/5,6.4/5,4/5,1.5/5,2/5,0.3/5,2.6/5,1.8/5,5.4/5,0/5,3.1/5,2.5/5,2.3/5],
[7.5/5,7.9/5,8.8/5,9/5,9/5,8.9/5,9.3/5,10.4/5,9.9/5,6.3/5,1.5/5,7.3/5,6.4/5,7/5,9.6/5,10.3/5,9.6/5,8.9/5,10.5/5,8.6/5,6.2/5,9.3/5,0/5,9.3/5,9.1/5],
[1.9/5,2.2/5,0.5/5,1/5,1.6/5,0.4/5,1.8/5,4/5,4.2/5,4.2/5,2.5/5,5.9/5,7.6/5,7.9/5,3.8/5,3.6/5,3.5/5,2.2/5,4.1/5,0.7/5,5.6/5,2.6/5,3.2/5,0/5,1.3/5],
[1.6/5,2/5,0.8/5,1/5,1.4/5,0.9/5,1.6/5,3.8/5,3.9/5,3.9/5,2.2/5,5.7/5,7.3/5,7.7/5,3.6/5,3.3/5,3.3/5,1.9/5,3.9/5,0.6/5,5.4/5,2.4/5,3/5,1.3/5,0/5]]


tourist_dict = {0: 'Майдан Незалежності',
                1: 'Вул.Хрещатик',
                2: 'Андріївський узвіз',
                3: 'Михайлівський золотоверхий собор',
                4: 'Софійський собор',
                5: 'Андріївська церква',
                6: 'Золоті ворота',
                7: 'Будинок з химерами',
                8: 'Шоколадний будинок',
                9: 'Маріїнський палац',
                10: 'Міст між Володимирською гіркою та Аркою Свободи українського народу(Аркою Дружби народів)',
                11: 'Києво-Печерська Лавра',
                12: 'Батьківщина-Мати',
                13: 'Ботанічний сад ім. М.М.Гришка',
                14: 'Контрактова площа',
                15: 'Ботанічний сад ім. Фоміна',
                16: 'ТРЦ Gulliver',
                17: 'Національна опера України',
                18: 'Національний академічний драматичний театр ім. Івана Франка',
                19: 'Руїни Десятинної церкви',
                20: 'Kyiv Food Market',
                21: 'Володимирський собор',
                22: 'Поштова площа',
                23: 'Фунікулер',
                24: 'Пейзажна алея'
                }



score=[10.0,10.0,8.0,8.0,8.0,8.0,8.0,7.0,8.0,8.0,10.0,7.0,7.0,0.0,5.0,0.0,0.0,2.0,0.0,6.0,0.0,3.0,6.0,6.0,7.0]
score1=[0.0,0.0,0.0,0.0,18.0,15.0,16.0,15.0,15.0,18.0,0.0,15.0,13.0,5.0,0.0,5.0,5.0,9.0,7.0,0.0,7.0,0.0,0.0,6.0,0.0]
if int(time.strftime('%H')) < 10 or int(time.strftime('%H')) >= 18:
    score1[4]=8.0
    score1[5]=8.0
    score1[6]=7.0
    score1[7]=7.0
    score1[8]=8.0
    score1[9]=8.0
    score1[12]=8.0
if int(time.strftime('%H')) < 7 or int(time.strftime('%H')) >= 20:
    score1[11]=7.0
if int(time.strftime('%H')) < 8 or int(time.strftime('%H')) >= 21:
    score1[13]=0.0
if int(time.strftime('%H')) < 10 or int(time.strftime('%H')) >= 22:
    score1[16]=0.0
    score1[20]=0.0
if int(time.strftime('%H')) < 10 or int(time.strftime('%H')) >= 21:
    score1[17]=2.0
    score1[18]=0.0
if int(time.strftime('%H')) < 7 or int(time.strftime('%H')) >= 22:
    score1[23]=6.0 
print("Проєкт з дослідження операцій на тему: ПОБУДОВА ОПТИМАЛЬНОГО ТУРИСТИЧНОГО МАРШРУТУ У М.КИЄВІ\nПідготували:\nСтудент групи КМ-11 КРАКОВИЧ БОРИСЛАВ\nСтудент групи КМ-12 ВАВРОВСЬКИЙ ВІКТОР")
print("Список точок:\n0-Майдан Незалежності\n1-Вул.Хрещатик\n2-Андріївський узвіз\n3-Михайлівський золотоверхий собор\n4-Софійський собор\n5-Андріївська церква\n6-Золоті ворота\n7-Будинок з химерами\n8-Шоколадний будинок\n9-Маріїнський палац")
print("10-Міст між Володимирською гіркою та Аркою Свободи українського народу(Аркою Дружби народів) \n11-Києво-Печерська Лавра\n12-Батьківщина-Мати\n13-Ботанічний сад ім. М.М.Гришка\n14-Контрактова площа\n15-Ботанічний сад ім. Фоміна\n16-ТРЦ Gulliver\n17-Національна опера України\n18-Національний академічний драматичний театр ім. Івана Франка\n19-Руїни Десятинної церкви")
print("20-Kyiv Food Market\n21-Володимирський собор\n22-Поштова площа\n23-Фунікулер\n24-Пейзажна алея\n")
T_max=float(input("Введіть обмежену кількість хвилин на тур: "))

#Пошук індексів вершин
def find_index_2d(lst, target):
    for i, sublist in enumerate(lst):
        if sublist == target:
            return i

#Алгоритм Флойд-Уошерра
def floyd_warshall(lst):
    distances = np.zeros((25, 25))
    times = np.zeros((25, 25))
    duration_times = np.zeros((25, 25))
    on_foot_times = np.zeros((25, 25))
    next_nodes = np.zeros((25, 25), dtype = int)

    for i in range(10):
        for j in range(10):
            if i != j:
                distances[i][j] = math.inf
    
    for i in range(25):
        for j in range(25):
            if i != j:
                times[i][j] = math.inf

    for i in range(25):
        for j in range(25):
            if i != j:
                duration_times[i][j] = math.inf
            
    for i in range(25):
        for j in range(25):
            if i != j:
                on_foot_times[i][j] = math.inf

    distances = matrix_distances.copy()
    times = matrix_times.copy()
    #duration_times = matrix_duration_times.copy()
    on_foot_times = matrix_on_foot_times.copy()

    for k in range(25):
        for i in range(25):
            for j in range(25):
                if distances[i][j] > distances[i][k] + distances[k][j]:
                    distances[i][j] = distances[i][k] + distances[k][j]
                    next_nodes[i][j] = k

    for k in range(25):
        for i in range(25):
            for j in range(25):
                if times[i][j] > times[i][k] + times[k][j]:
                    times[i][j] = times[i][k] + times[k][j]
                    next_nodes[i][j] = k

    for k in range(25):
        for i in range(25):
            for j in range(25):
                if duration_times[i][j] > duration_times[i][k] + duration_times[k][j]:
                    duration_times[i][j] = duration_times[i][k] + duration_times[k][j]
                    next_nodes[i][j] = k

    for k in range(25):
        for i in range(25):
            for j in range(25):
                if on_foot_times[i][j] > on_foot_times[i][k] + on_foot_times[k][j]:
                    on_foot_times[i][j] = on_foot_times[i][k] + on_foot_times[k][j]
                    next_nodes[i][j] = k
    return distances, next_nodes, times, on_foot_times






distances, next_nodes, times, on_foot_times = floyd_warshall(matrix_distances)
start_node = int(input("Введіть номер туристичної точки (0-24), з якої починається тур:"))
current_node = start_node
#Запис списку вершин(шляху)
path = [tourist_dict[current_node]]


visited = set()
visited.add(current_node)

lst1 = list()
l=0
while l<25:
    exit = input("Якщо ви хочете зупинитися біля будь-якої точки, натисніть y. В іншому випадку натисніть x:")
    if exit == "x":
        break
    else: 
        app1=int(input("Введіть туристичну точку, яку біля якої хочете зупинитися:\n"))
        lst1.append(app1)
    l+=1

lst = list()
l=0
while l<25:
    exit = input("Якщо ви хочете відвідати будь-яку тур.точку зсередини, натисніть y. В іншому випадку натисніть x:")
    if exit == "x":
        break
    else: 
        app=int(input("Введіть туристичну точку, яку ви хочете відвідати зсередини\nУВАГА! Тур.точки мають режим роботи, якщо зараз її відвідати неможливо, кількість балів за відвідування цієї точки зсередини-0:"))
        lst.append(app)
    l+=1


sum_distance = 0
sum_score = 0
sum_time = 0
sum_duration_time = 0
sum_on_foot_time = 0
distance_ratio = 0
while len(visited) < len(matrix_distances):
    max_distance_ratio = -math.inf
    next_node = None
    for i in range(len(matrix_distances)):
        if i not in visited:
            if (current_node in lst) == True:
                
                if current_node==4 or current_node==5 or current_node==6 or current_node==7 or current_node==8 or current_node==9 or current_node==12:
                    if int(time.strftime('%H')) >= 10 and int(time.strftime('%H')) < 18:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                    else:
                        sc = score[i]
                elif current_node==11:
                    if int(time.strftime('%H')) >= 7 and int(time.strftime('%H')) < 20:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                    else:
                        sc = score[i]
                elif current_node==13:
                    if int(time.strftime('%H')) >= 8 and int(time.strftime('%H')) < 21:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                    else:
                        sc = score[i]
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                elif current_node==16 or current_node==20:
                    if int(time.strftime('%H')) >= 10 and int(time.strftime('%H')) < 22:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                    else:
                        sc = score[i]
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                elif current_node==17 or current_node==18:
                    if int(time.strftime('%H')) >= 10 and int(time.strftime('%H')) < 21:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                    else:
                        sc = score[i]
                elif current_node==23:
                    if int(time.strftime('%H')) >= 7 and int(time.strftime('%H')) < 22:
                        sc = score1[current_node]
                        rizn = T_max-sum_time
                        if rizn < 60:
                            sum_time += rizn
                        else:
                            sum_time += 60
                        lst.remove(current_node)
                else:
                        sc = score[i]
                
            elif (current_node in lst1) == True:
                sc = score[current_node]*2
                rizn = T_max-sum_time
                if rizn < 10:
                    sum_time += rizn
                else:
                    sum_time += 10
                lst1.remove(current_node)
            else:
                sc = score[i]   
            distance_ratio = sc / distances[current_node][i]
            if distance_ratio > max_distance_ratio:
                max_distance_ratio = distance_ratio
                next_node = i
    sum_score += sc

    '''
    if time.strftime('%a')=='Mon' or time.strftime('%a')=='Tue' or time.strftime('%a')=='Wed' or time.strftime('%a')=='Thu' or time.strftime('%a')=='Fri':
        if int(time.strftime('%H')) < 5 or int(time.strftime('%H')) >= 23:
            duration_times[current_node][next_node]=times[current_node][next_node]
            times[current_node][next_node]=0
            
        elif int(time.strftime('%H')) >= 10 and int(time.strftime('%H')) < 16:
            duration_times[current_node][next_node]=times[current_node][next_node]
    elif time.strftime('%a')=='Sat' or time.strftime('%a')=='Sun':
        if int(time.strftime('%H')) < 5 or int(time.strftime('%H')) >= 23:
            duration_times[current_node][next_node]=times[current_node][next_node]
            times[current_node][next_node]=0
        else:
            duration_times[current_node][next_node]=times[current_node][next_node]
    '''

    sum_distance += distances[current_node][next_node]
    if int(time.strftime('%H')) < 5 or int(time.strftime('%H')) >= 23:
        sum_time += (on_foot_times[current_node][next_node]*60)
        #sum_time += 10
        if sum_time > T_max:
            sum_time=sum_time-(on_foot_times[current_node][next_node]*60)
            sum_distance=sum_distance-distances[current_node][next_node]
            break
    elif int(time.strftime('%H')) >= 5 and int(time.strftime('%H')) < 23:
        if ((on_foot_times[current_node][next_node])*60)<((times[current_node][next_node])*3):
            sum_time += (on_foot_times[current_node][next_node]*60)
            #sum_time += 10
            if sum_time > T_max:
                sum_time=sum_time-(on_foot_times[current_node][next_node]*60)
                sum_distance=sum_distance-distances[current_node][next_node]
                break
        elif ((times[current_node][next_node])*3)<(on_foot_times[current_node][next_node]*60):   
            sum_time += (times[current_node][next_node]*3)
            #sum_time += 10
            if sum_time > T_max:
                sum_time=sum_time-(times[current_node][next_node]*3)
                sum_distance=sum_distance-distances[current_node][next_node]
                break
    if next_node is None:
        break
     

    #Додавання нової вершини
    path.append(tourist_dict[next_node])
    current_node = next_node
    visited.add(current_node)


    
#виведення результату
print("Кількість отриманих балів: ", sum_score)
print("Відстань маршруту:", sum_distance, "км.")
print("Час проїзду маршруту:", sum_time, "хв.")
if int(time.strftime('%H')) < 5 or int(time.strftime('%H')) >= 23:
    print("Громадський транспорт не працює!")
print("Оптимальний шлях: ")
path_list = path
print(path_list)